{
  "name": "model-forge",
  "private": true,
  "version": "0.1.0",
  "description": "Web-based AI model benchmarking system (MVP).",
  "license": "MIT",
  "workspaces": {
    "packages": [
      "apps/*",
      "packages/*"
    ],
    "nohoist": []
  },
  "scripts": {
    "build": "npm run -ws build",
    "dev": "npm run -ws dev",
    "lint": "npm run -ws lint",
    "format": "prettier --write .",
    "typecheck": "npm run -ws typecheck",
    "install:web": "npm install -w @model-forge/web",
    "install:api": "npm install -w @model-forge/api",
    "install:shared": "npm install -w @model-forge/shared",
    "install:all": "npm run install:shared && npm run install:web && npm run install:api",
    "start": "concurrently \"npm run dev -w @model-forge/api\" \"npm run dev -w @model-forge/web\" --names \"API,WEB\" --prefix-colors \"blue,green\"",
    "start:api": "npm run dev -w @model-forge/api",
    "start:web": "npm run dev -w @model-forge/web",
    "clean:db": "node -e \"const fs=require('fs'),path=require('path');['apps/api/benchmark.db','apps/api/apps/api/var'].forEach(p=>{try{if(fs.existsSync(p)){if(fs.statSync(p).isDirectory()){fs.rmSync(p,{recursive:true,force:true})}else{fs.unlinkSync(p)}}console.log('Cleaned:',p)}catch(e){console.log('Could not clean:',p,e.message)}})\""
  },
  "devDependencies": {
    "concurrently": "^9.2.0",
    "prettier": "^3.3.3",
    "typescript": "^5.5.4"
  },
  "engines": {
    "node": ">=18.18.0"
  }
}